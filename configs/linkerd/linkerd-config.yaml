# Linkerd Service Mesh Configuration
# This configuration provides consistent service mesh setup across all clusters

apiVersion: v1
kind: Namespace
metadata:
  name: linkerd
  labels:
    linkerd.io/control-plane-ns: linkerd
    config.linkerd.io/admission-webhooks: disabled
  annotations:
    linkerd.io/inject: disabled

---
# Linkerd Control Plane Configuration
apiVersion: install.linkerd.io/v1alpha1
kind: ControlPlane
metadata:
  name: linkerd-control-plane
  namespace: linkerd
spec:
  # High availability configuration
  controllerReplicas: 3
  
  # Identity configuration
  identity:
    issuer:
      scheme: kubernetes.io/tls
      clockSkewAllowance: 20s
      issuanceLifetime: 24h0m0s
    
  # Proxy configuration
  proxy:
    image:
      name: cr.l5d.io/linkerd/proxy
      version: stable-2.14.1
    resources:
      cpu:
        limit: 1000m
        request: 100m
      memory:
        limit: 250Mi
        request: 20Mi
    
  # Control plane components
  controllerImage: cr.l5d.io/linkerd/controller:stable-2.14.1
  debugImage: cr.l5d.io/linkerd/debug:stable-2.14.1
  
  # Observability
  grafana:
    enabled: true
  
  # Security
  cniEnabled: false  # We're using Cilium as primary CNI
  
---
# Linkerd Viz Extension
apiVersion: v1
kind: Namespace
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/inject: disabled

---
apiVersion: install.linkerd.io/v1alpha1
kind: Extension
metadata:
  name: linkerd-viz
  namespace: linkerd-viz
spec:
  extension: viz
  config:
    # Grafana configuration
    grafana:
      enabled: true
      image: grafana/grafana:9.1.0
      resources:
        cpu:
          limit: 1000m
          request: 100m
        memory:
          limit: 1024Mi
          request: 50Mi
    
    # Prometheus configuration
    prometheus:
      enabled: true
      image: prom/prometheus:v2.37.0
      resources:
        cpu:
          limit: 4000m
          request: 300m
        memory:
          limit: 8192Mi
          request: 300Mi
      persistence:
        enabled: true
        storageClass: ""  # Use default storage class
        size: 10Gi
    
    # Web dashboard
    dashboard:
      enabled: true
      replicas: 2
      resources:
        cpu:
          limit: 1000m
          request: 100m
        memory:
          limit: 50Mi
          request: 50Mi

---
# Service Profile for automatic traffic splitting
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: webapp
  namespace: default
spec:
  routes:
  - name: api
    condition:
      method: GET
      pathRegex: /api/.*
    responseClasses:
    - condition:
        status:
          min: 500
          max: 599
      isFailure: true
    timeout: 30s
    retryBudget:
      retryRatio: 0.2
      minRetriesPerSecond: 10
      ttl: 10s

---
# Traffic Split for canary deployments
apiVersion: split.smi-spec.io/v1alpha1
kind: TrafficSplit
metadata:
  name: webapp-split
  namespace: default
spec:
  service: webapp
  backends:
  - service: webapp-stable
    weight: 90
  - service: webapp-canary
    weight: 10

---
# Network Policy for Linkerd
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: linkerd-control-plane
  namespace: linkerd
spec:
  podSelector:
    matchLabels:
      linkerd.io/control-plane-component: controller
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: linkerd
    - namespaceSelector:
        matchLabels:
          linkerd.io/is-control-plane: "true"
    ports:
    - protocol: TCP
      port: 8085
    - protocol: TCP
      port: 8086
    - protocol: TCP
      port: 9995
    - protocol: TCP
      port: 9996
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 8443
    - protocol: UDP
      port: 53

---
# Linkerd Multicluster Configuration
apiVersion: v1
kind: Secret
metadata:
  name: cluster-credentials-aws
  namespace: linkerd-multicluster
  labels:
    linkerd.io/cluster-name: aws
type: Opaque
data:
  kubeconfig: ""  # Base64 encoded kubeconfig for AWS cluster

---
apiVersion: v1
kind: Secret
metadata:
  name: cluster-credentials-azure
  namespace: linkerd-multicluster
  labels:
    linkerd.io/cluster-name: azure
type: Opaque
data:
  kubeconfig: ""  # Base64 encoded kubeconfig for Azure cluster

---
apiVersion: v1
kind: Secret
metadata:
  name: cluster-credentials-gcp
  namespace: linkerd-multicluster
  labels:
    linkerd.io/cluster-name: gcp
type: Opaque
data:
  kubeconfig: ""  # Base64 encoded kubeconfig for GCP cluster

---
# Linkerd Policy for mTLS
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  name: webapp-server
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: webapp
  port: 8080
  proxyProtocol: HTTP/2

---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  name: webapp-auth
  namespace: default
spec:
  server:
    name: webapp-server
  client:
    meshTLS:
      identities:
      - "webapp-client.default.serviceaccount.identity.linkerd.cluster.local"

---
# Linkerd Ingress Configuration
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: linkerd-viz
  namespace: linkerd-viz
  annotations:
    nginx.ingress.kubernetes.io/upstream-vhost: $service_name.$namespace.svc.cluster.local:8084
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header Origin "";
      proxy_hide_header l5d-remote-ip;
      proxy_hide_header l5d-server-id;
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: linkerd-viz-auth
    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - Linkerd Viz'
spec:
  ingressClassName: nginx
  rules:
  - host: linkerd.multicloud-k8s.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: web
            port:
              number: 8084

---
# Basic auth secret for Linkerd dashboard
apiVersion: v1
kind: Secret
metadata:
  name: linkerd-viz-auth
  namespace: linkerd-viz
type: Opaque
data:
  auth: YWRtaW46JGFwcjEkSDY1dnVhNzAkLnRiTXhPbGRBaVk4VUNhUVFhRzFjLw==  # admin:admin

---
# Linkerd Jaeger Extension for distributed tracing
apiVersion: v1
kind: Namespace
metadata:
  name: linkerd-jaeger
  labels:
    linkerd.io/extension: jaeger
  annotations:
    linkerd.io/inject: disabled

---
apiVersion: install.linkerd.io/v1alpha1
kind: Extension
metadata:
  name: linkerd-jaeger
  namespace: linkerd-jaeger
spec:
  extension: jaeger
  config:
    collector:
      image: jaegertracing/jaeger-collector:1.37.0
      resources:
        cpu:
          limit: 1000m
          request: 100m
        memory:
          limit: 1Gi
          request: 100Mi
    
    jaeger:
      image: jaegertracing/all-in-one:1.37.0
      resources:
        cpu:
          limit: 1000m
          request: 100m
        memory:
          limit: 1Gi
          request: 100Mi

---
# Linkerd CNI Configuration (if using Linkerd CNI)
apiVersion: v1
kind: ConfigMap
metadata:
  name: linkerd-cni-config
  namespace: linkerd-cni
data:
  cni_network_config: |-
    {
      "name": "linkerd-cni",
      "type": "linkerd-cni",
      "log_level": "info",
      "policy": {
        "type": "k8s",
        "k8s_api_root": "https://__KUBERNETES_SERVICE_HOST__:__KUBERNETES_SERVICE_PORT__",
        "k8s_auth_token": "__SERVICEACCOUNT_TOKEN__"
      },
      "kubernetes": {
        "kubeconfig": "__KUBECONFIG_FILEPATH__"
      },
      "linkerd": {
        "incoming-proxy-port": 4143,
        "outgoing-proxy-port": 4140,
        "proxy-uid": 2102,
        "ports-to-redirect": [],
        "inbound-ports-to-ignore": ["4190", "4191"],
        "outbound-ports-to-ignore": [],
        "simulate": false,
        "use-wait-flag": false
      }
    } 